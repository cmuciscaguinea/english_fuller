//lesson_list.dart

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'lesson_details.dart';

class LessonsList extends StatefulWidget {
  @override
  _LessonsListState createState() => _LessonsListState();
}

class _LessonsListState extends State<LessonsList> {
  final List<String> lessons = [
    // List of lessons

    // Vowel Sound
    'Lesson 1: Alphabets Sounds',
    'Lesson 2: Vowel Sound (Aa)',
    'Lesson 3: Vowel Sound (Ee)',
    'Lesson 4: Vowel Sound (Ii)',
    'Lesson 5: Vowel Sound (Oo)',
    'Lesson 6: Vowel Sound (Uu)',

    // Reading Lessons
    'Lesson 7: Hickory Dickory Dock',
    'Lesson 8: Incy Wincy Spider',
    'Lesson 9: Miss Polly had a Dolly',

    // Rhyming Words
    'Lesson 10: Rhyming Words /al/',
    'Lesson 11: Rhyming Words /ar/',
    'Lesson 12: Rhyming Words /at/',
    'Lesson 13: Rhyming Words /ee/',
    'Lesson 14: Rhyming Words /ell/',
    'Lesson 15: Rhyming Words /uck/',

    // Vowel and Consonant word sound
    'Lesson 16: Words with long a /ey/',
    'Lesson 17: Words with ai /ey/',
    'Lesson 18: Words with au /ow/',
    'Lesson 19: Words with aw /ow/',
    'Lesson 20: Words with ie /Ã«/ or /iy/',
    'Lesson 21: Words with ie /ay/',
    'Lesson 22: Words with /ew/',
    'Lesson 23: Words with y /ay/',

    // The Consonant Blend
    'Lesson 24: Consonant Blend /bl/',
    'Lesson 25: Consonant Blend /br/',
    'Lesson 26: Consonant Blend /cr/',
    'Lesson 27: Consonant Blend /dr/',
    'Lesson 28: Consonant Blend /fl/',
    'Lesson 29: Consonant Blend /fr/',
    'Lesson 30: Consonant Blend /tr/',
    'Lesson 31: Consonant Blend /sw/',
    'Lesson 32: Consonant Blend /sh/',

    // The Consonant Cluster
     'Lesson 33: Consonant Cluster /str/',
     'Lesson 34: Consonant Cluster /spl/',
     'Lesson 35: Consonant Cluster /scr/',
    
    // The Final Consonant Blend
    'Lesson 36: Final Consonant /st/',
    'Lesson 37: Final Consonant /rt/',
    'Lesson 38: Final Consonant /rk/',
    'Lesson 39: Final Consonant /nk/',
    'Lesson 40: Final Consonant /nd/',
  ];

  Set<int> completedLessons = {};

  // Check if all lessons are completed
  bool get allLessonsCompleted => completedLessons.length == lessons.length;

  // Load completed lessons from SharedPreferences
  void loadCompletedLessons() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      completedLessons = prefs.getStringList('completedLessons')?.map((e) => int.parse(e)).toSet() ?? {};
    });
  }

  // Save completed lessons to SharedPreferences
  void saveCompletedLessons() async {
    final prefs = await SharedPreferences.getInstance();
    prefs.setStringList('completedLessons', completedLessons.map((e) => e.toString()).toList());
  }

  // Reset all completed lessons
  void resetCompletedLessons() {
    setState(() {
      completedLessons.clear();
    });
    saveCompletedLessons();  // Update SharedPreferences
  }

  @override
  void initState() {
    super.initState();
    loadCompletedLessons();  // Load completed lessons when the screen initializes
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.green,
        title: Text('The Lessons', style: GoogleFonts.lexendDeca()),
        centerTitle: true,
        leading: allLessonsCompleted
            ? IconButton(
                icon: Icon(Icons.home),
                onPressed: () {
                  // Navigate to home screen when all lessons are complete
                  Navigator.pop(context); // Pop back to the previous screen (home screen)
                },
              )
            : null,
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              padding: const EdgeInsets.all(8.0),
              itemCount: lessons.length,
              itemBuilder: (context, index) {
                bool isCompleted = completedLessons.contains(index + 1);

                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 8.0),
                  child: ElevatedButton(
                    onPressed: () async {
                          final result = await Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => LessonDetailScreen(lessonNumber: index + 1),
                            ),
                          );

                            // Mark the lesson as completed if returned
                            if (result != null && !completedLessons.contains(index + 1)) {
                              setState(() {
                                completedLessons.add(index + 1);
                              });
                              saveCompletedLessons(); // Save completed lessons after the change
                            }
                          },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green, // Keep the button always green
                      disabledBackgroundColor: Colors.green, // Button stays green even when disabled
                      padding: EdgeInsets.symmetric(horizontal: 30, vertical: 20),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Flexible(
                          child: Text(
                            lessons[index],
                            style: GoogleFonts.lexendDeca(
                              fontSize: 18,
                              color: Colors.white, // Text always white
                            ),
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),
                        if (isCompleted)
                          Icon(
                            Icons.check,
                            color: Colors.white, // White check icon
                            size: 24,
                          ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
          //Button to reset completed lessons
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              onPressed: resetCompletedLessons,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red, // Button color for reset
                padding: EdgeInsets.symmetric(horizontal: 80, vertical: 20),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              child: Text(
                'Reset All Lessons',
                style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white),
              ),
            ),
          ),
        ],
      ),
    );
  }
}