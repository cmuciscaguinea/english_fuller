//game_details.dart

import 'package:english_fuller/game_data.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:shared_preferences/shared_preferences.dart';

// ignore: must_be_immutable
class GameDetailPage extends StatefulWidget {
  final int gameId;
  final int totalLevels;
  int currentLevel;
  final VoidCallback onGameCompleted;
  final Function(int) updateProgressScore; // To update progress in game_list.dart

  GameDetailPage({
    Key? key,
    required this.gameId,
    required this.totalLevels,
    required this.currentLevel,
    required this.onGameCompleted,
    required this.updateProgressScore, required String gameTitle,
  }) : super(key: key);

  @override
  _GameDetailPageState createState() => _GameDetailPageState();
}

class _GameDetailPageState extends State<GameDetailPage> {
  late GameContent gameContent;
  String? selectedAnswer;
  String feedbackMessage = "";
  Color feedbackColor = Colors.transparent;
  AudioPlayer _audioPlayer = AudioPlayer();
  bool isNextLevelEnabled = false; // Control Next Level button
  int correctAnswers = 0; // Track the number of correct answers

  @override
  void initState() {
    super.initState();
    gameContent = GameContent.getGameContent(widget.gameId, widget.currentLevel);
  }

  @override
  void dispose() {
    super.dispose();
    _saveProgress();
  }

  Future<void> _saveProgress() async {
  final prefs = await SharedPreferences.getInstance();
  prefs.setInt('${widget.gameId}_level_${widget.currentLevel}', correctAnswers);
  widget.updateProgressScore(correctAnswers); // Update progress in the main list
}

  @override
  Widget build(BuildContext context) {
    // Determine the game difficulty (Easy, Moderate, Hard) based on gameId
    String gameDifficulty = '';
    if (widget.gameId == 1) {
      gameDifficulty = 'Easy';
    } else if (widget.gameId == 2) {
      gameDifficulty = 'Moderate';
    } else if (widget.gameId == 3) {
      gameDifficulty = 'Hard';
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(
          "$gameDifficulty: Level ${widget.currentLevel}",
          style: GoogleFonts.lexendDeca(),
        ),
        backgroundColor: Colors.green,
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              "Score: $correctAnswers/${widget.totalLevels}",
              style: GoogleFonts.lexendDeca(fontSize: 18),
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.start,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  SizedBox(height: 20),
                  Text(
                    "Game Sound and Picture",
                    style: GoogleFonts.lexendDeca(fontSize: 22, color: Colors.black),
                  ),
                  SizedBox(height: 20),
                  loadImage(gameContent.imagePath),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      playSound(gameContent.soundPath);
                    },
                    child: Icon(Icons.play_arrow),
                    style: ElevatedButton.styleFrom(
                      shape: CircleBorder(),
                      padding: EdgeInsets.all(16),
                      backgroundColor: Colors.blue,
                    ),
                  ),
                  SizedBox(height: 10),
                  Text(
                    feedbackMessage,
                    style: GoogleFonts.lexendDeca(
                      fontSize: 20,
                      color: feedbackColor,
                    ),
                  ),
                  SizedBox(height: 20),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
                    child: GridView.builder(
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 2,
                        crossAxisSpacing: 12.0,
                        mainAxisSpacing: 12.0,
                        childAspectRatio: 2.5,
                      ),
                      itemCount: gameContent.answers.length,
                      physics: NeverScrollableScrollPhysics(),
                      shrinkWrap: true,
                      itemBuilder: (context, index) {
                        return _buildAnswerButton(gameContent.answers[index]);
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
          Padding(
  padding: const EdgeInsets.all(16.0),
  child: ElevatedButton(
    onPressed: () {
      // Save the score before navigating away or proceeding to the next level
      _saveProgress();
      if (widget.currentLevel == widget.totalLevels) {
        widget.onGameCompleted(); // Mark game as complete
        Navigator.pop(context);  // Navigate back to the game list
      } else {
        setState(() {
          // Move to the next level
          widget.currentLevel++;  
          gameContent = GameContent.getGameContent(widget.gameId, widget.currentLevel); // Load new level

          // Reset feedback message and selected answer for the next level
          selectedAnswer = null;
          feedbackMessage = "";
          feedbackColor = Colors.transparent;
        });
      }
    },
    child: Text(
      "Next Level",
      style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white),
    ),
    style: ElevatedButton.styleFrom(
      backgroundColor: Colors.green,
      padding: EdgeInsets.symmetric(horizontal: 105, vertical: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(5),
      ),
    ),
  ),
),

        ],
      ),
    );
  }

  Widget loadImage(String imagePath) {
    return Container(
      width: 100,
      height: 100,
      child: Image.asset(imagePath),
    );
  }

  Widget _buildAnswerButton(String answer) {
    Color buttonColor = Colors.blue[300]!; 
    if (selectedAnswer == answer) {
      buttonColor = (answer == gameContent.correctAnswer) ? Colors.green : Colors.red;
    }

    return SizedBox(
      width: 90,
      height: 50,
      child: ElevatedButton(
        onPressed: () => _checkAnswer(answer),
        style: ElevatedButton.styleFrom(
          backgroundColor: buttonColor,
          padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.star,
              color: Colors.white,
              size: 20,
            ),
            SizedBox(width: 4),
            Flexible(
              child: Text(
                answer,
                style: GoogleFonts.lexendDeca(fontSize: 20),
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _checkAnswer(String answer) {
    setState(() {
      selectedAnswer = answer;
      if (answer == gameContent.correctAnswer) {
        feedbackMessage = "Correct!";
        feedbackColor = Colors.green;
        correctAnswers++; // Count correct answers
      } else {
        feedbackMessage = "Wrong!";
        feedbackColor = Colors.red;
      }
    });
  }

  void playSound(String soundPath) async {
    await _audioPlayer.play(AssetSource(soundPath));
  }
}
