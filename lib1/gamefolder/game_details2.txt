//game_details

import 'package:english_fuller/game_data.dart'; // Assuming you have GameContent defined in game_data.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:audioplayers/audioplayers.dart'; // Add this import for audio playback

class GameDetailPage extends StatefulWidget {
  final int gameId;
  final VoidCallback onGameCompleted;

  const GameDetailPage({Key? key, required this.gameId, required this.onGameCompleted}) : super(key: key);

  @override
  _GameDetailPageState createState() => _GameDetailPageState();
}

class _GameDetailPageState extends State<GameDetailPage> {
  late GameContent gameContent;
  String? selectedAnswer;
  String feedbackMessage = "";
  Color feedbackColor = Colors.transparent;
  AudioPlayer _audioPlayer = AudioPlayer();

  @override
  void initState() {
    super.initState();
    gameContent = GameContent.getGameContent(widget.gameId);
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Game ${widget.gameId}",
          style: GoogleFonts.lexendDeca(),
        ),
        backgroundColor: Colors.green,
      ),
      body: Center(
        
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
             SizedBox(width: 20),
            Text(
              "Game Sound and Picture",
              style: GoogleFonts.lexendDeca(fontSize: 22, color: Colors.black),
            ),
            SizedBox(height: 20),
            loadImage(gameContent.imagePath), // Load the image dynamically
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                playSound(gameContent.soundPath); // Play sound when button is pressed
              },
              child: Icon(Icons.play_arrow),
              style: ElevatedButton.styleFrom(
                shape: CircleBorder(),
                padding: EdgeInsets.all(0),
                backgroundColor: Colors.blue,
              ),
            ),
            SizedBox(height: 10),
            Text(
              feedbackMessage, // Display the feedback message
              style: GoogleFonts.lexendDeca(
                fontSize: 20, 
                //fontWeight: FontWeight.bold, 
                color: feedbackColor,  // Use the dynamic feedback color here
              ),
            ),

            SizedBox(height: 20),
            // Build answer buttons dynamically from the answers list
            for (var answer in gameContent.answers) 
              _buildAnswerButton(answer),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                widget.onGameCompleted(); // Mark game as completed
                Navigator.pop(context); // Go back to the game list
              },
              child: Text(
                "Next Level",
                style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white,),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: EdgeInsets.symmetric(horizontal: 100, vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
            ),
            
          ],
        ),
      ),
    );
  }

  Widget loadImage(String imagePath) {
    return Container(
      width: 100,
      height: 100,
      child: Image.asset(imagePath),
    );
  }


  Widget _buildAnswerButton(String answer) {
    Color buttonColor = Colors.blue[300]!; // Default button color
    if (selectedAnswer == answer) {
      buttonColor = (answer == gameContent.correctAnswer) ? Colors.green : Colors.red;
    }

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Container(
        constraints: BoxConstraints(maxWidth: 150),
        child: ElevatedButton(
          onPressed: () => _checkAnswer(answer),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.star,
                color: Colors.white,
                size: 20,
              ),
              SizedBox(width: 10),
              Text(
                answer,
                style: GoogleFonts.lexendDeca(fontSize: 20),
              ),
            ],
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: buttonColor,
            padding: EdgeInsets.symmetric(horizontal: 20, vertical: 12),
            minimumSize: Size(150, 50),
          ),
        ),
      ),
    );
  }

  void _checkAnswer(String answer) {
    setState(() {
      selectedAnswer = answer;
      if (answer == gameContent.correctAnswer) {
        feedbackMessage = "Correct!";
        feedbackColor = Colors.green;
      } else {
        feedbackMessage = "Try Again!";
        feedbackColor = Colors.red;
      }
    });
  }

  // Widget _buildAnswerButton(String answer) {
  //   Color buttonColor = Colors.blue[300]!; // Default button color
  //   if (selectedAnswer == answer) {
  //     buttonColor = (answer == gameContent.correctAnswer) ? Colors.green : Colors.red;
  //   }

  //   return Padding(
  //     padding: const EdgeInsets.symmetric(vertical: 8.0),
  //     child: ElevatedButton(
  //       onPressed: () => _checkAnswer(answer),
  //       child: Row(
  //           mainAxisAlignment: MainAxisAlignment.center,
  //           children: [
  //             Icon(
  //               Icons.star,
  //               color: Colors.white,
  //               size: 20,
  //             ),
  //             SizedBox(width: 10),
  //             Text(
  //               answer,
  //               style: GoogleFonts.lexendDeca(fontSize: 20),
  //             ),
  //           ],
  //         ),
  //       style: ElevatedButton.styleFrom(
  //         backgroundColor: buttonColor,
  //         padding: EdgeInsets.symmetric(horizontal: 32, vertical: 16),
  //       ),
  //     ),
  //   );
  // }

  //  void _checkAnswer(String answer) {
  //   setState(() {
  //     selectedAnswer = answer;
  //     if (answer == gameContent.correctAnswer) {
  //       feedbackMessage = "Correct!";
  //       feedbackColor = Colors.green;
  //     } else {
  //       feedbackMessage = "Try Again!";
  //       feedbackColor = Colors.red;
  //     }
  //   });
  // }

  // Play sound method using AudioPlayer

void playSound(String soundPath) async {
  await _audioPlayer.play(AssetSource(soundPath)); // Plays sound from the assets/audio directory
}

}
