import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'game_content.txt';
import 'audio_handler.txt';

class GamePage extends StatefulWidget {
  @override
  _GamePageState createState() => _GamePageState();
}

class _GamePageState extends State<GamePage> {
  Set<int> completedGames = {};

  @override
  void initState() {
    super.initState();
    loadCompletedGames(); // Load completed games from SharedPreferences
  }

  // Load completed games from SharedPreferences
  void loadCompletedGames() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      completedGames = prefs.getStringList('completedGames')?.map((e) => int.parse(e)).toSet() ?? {};
    });
  }

  // Save completed games to SharedPreferences
  void saveCompletedGames() async {
    final prefs = await SharedPreferences.getInstance();
    prefs.setStringList('completedGames', completedGames.map((e) => e.toString()).toList());
  }

  void markGameAsCompleted(int gameId) {
    setState(() {
      completedGames.add(gameId); // Mark game as completed
    });
    saveCompletedGames(); // Save state
  }

  void resetGames() {
    setState(() {
      completedGames.clear(); // Clear the set
    });
    saveCompletedGames(); // Save reset state
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Game",
          style: GoogleFonts.lexendDeca(),
        ),
        backgroundColor: Colors.green,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            SizedBox(height: 20),
            Text(
              "Choose a Game!",
              style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.black),
            ),
            SizedBox(height: 20),
            Expanded(
              child: ListView.builder(
                itemCount: 10, // Number of games
                itemBuilder: (context, index) {
                  int gameId = index + 1;
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 8.0),
                    child: ElevatedButton(
                      onPressed: completedGames.contains(gameId)
                          ? null // Disable button if game is completed
                          : () async {
                              final result = await Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => GameDetailPage(
                                    gameId: gameId,
                                    onGameCompleted: () => markGameAsCompleted(gameId),
                                  ),
                                ),
                              );
                              if (result != null) {
                                markGameAsCompleted(gameId);
                              }
                            },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green, // Button stays green
                        disabledBackgroundColor: Colors.green, // Green even when disabled
                        padding: EdgeInsets.symmetric(horizontal: 30, vertical: 20),
                      ),
                      child: Stack(
                        alignment: Alignment.center,
                        children: [
                          // Centered Text
                          Align(
                            alignment: Alignment.center,
                            child: Text(
                              "Game $gameId",
                              style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white),
                            ),
                          ),
                          // Positioned Check Icon
                          if (completedGames.contains(gameId))
                            Align(
                              alignment: Alignment.centerRight,
                              child: Icon(
                                Icons.check,
                                color: Colors.white,
                              ),
                            ),
                        ],
                      ),

                    ),
                  );

                },
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: resetGames,
              child: Text(
                "Reset All Games",
                style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                padding: EdgeInsets.symmetric(horizontal: 100, vertical: 16),
              ),
            ),
            SizedBox(height: 5),
          ],
        ),
      ),
    );
  }
}

class GameDetailPage extends StatefulWidget {
  final int gameId;
  final VoidCallback onGameCompleted;

  const GameDetailPage({Key? key, required this.gameId, required this.onGameCompleted}) : super(key: key);

  @override
  _GameDetailPageState createState() => _GameDetailPageState();
}

class _GameDetailPageState extends State<GameDetailPage> {
  late GameContent gameContent;
  String? selectedAnswer;
  String feedbackMessage = "";
  Color feedbackColor = Colors.transparent;

  @override
  void initState() {
    super.initState();
    gameContent = GameContent.getGameContent(widget.gameId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Game ${widget.gameId}",
          style: GoogleFonts.lexendDeca(),
          
        ),
        backgroundColor: Colors.green,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              "Game Sound and Picture",
              style: GoogleFonts.lexendDeca(fontSize: 25),
            ),
            SizedBox(height: 20),
            loadImage(gameContent.imagePath),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                playSound(gameContent.audioPath);
              },
              child: Icon(Icons.play_arrow),
              style: ElevatedButton.styleFrom(
                shape: CircleBorder(),
                padding: EdgeInsets.all(10),
                backgroundColor: Colors.blue,
                
              ),
            ),
            SizedBox(height: 20),
            Text(
              feedbackMessage,
              style: GoogleFonts.lexendDeca(
                fontSize: 30,
                fontWeight: FontWeight.bold,
                color: feedbackColor,
              ),
            ),
            SizedBox(height: 20),
            ...gameContent.answers.map((answer) => _buildAnswerButton(answer)).toList(),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                widget.onGameCompleted(); // Mark game as completed
                Navigator.pop(context); // Go back to the game list
              },
              child: Text(
                "Next Game",
                style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.grey,
                padding: EdgeInsets.symmetric(horizontal: 60, vertical: 16),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget loadImage(String imagePath) {
    return Container(
      width: 100,
      height: 100,
      child: Image.asset(imagePath),
    );
  }

  Widget _buildAnswerButton(String answer) {
    Color buttonColor = Colors.blue[300]!; // Default button color
    if (selectedAnswer == answer) {
      buttonColor = (answer == gameContent.correctAnswer) ? Colors.green : Colors.red;
    }

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Container(
        constraints: BoxConstraints(maxWidth: 130),
        child: ElevatedButton(
          onPressed: () => _checkAnswer(answer),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.star,
                color: Colors.white,
                size: 20,
              ),
              SizedBox(width: 10),
              Text(
                answer,
                style: GoogleFonts.lexendDeca(fontSize: 20),
              ),
            ],
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: buttonColor,
            padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            minimumSize: Size(150, 50),
          ),
        ),
      ),
    );
  }

  void _checkAnswer(String answer) {
    setState(() {
      selectedAnswer = answer;
      if (answer == gameContent.correctAnswer) {
        feedbackMessage = "Correct!";
        feedbackColor = Colors.green;
      } else {
        feedbackMessage = "Try Again!";
        feedbackColor = Colors.red;
      }
    });
  }
}
