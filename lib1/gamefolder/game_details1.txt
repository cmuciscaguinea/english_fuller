import 'package:english_fuller/game_data.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:audioplayers/audioplayers.dart';

class GameDetailPage extends StatefulWidget {
  final int gameId;
  final VoidCallback onGameCompleted;

  const GameDetailPage({Key? key, required this.gameId, required this.onGameCompleted}) : super(key: key);

  @override
  _GameDetailPageState createState() => _GameDetailPageState();
}

class _GameDetailPageState extends State<GameDetailPage> {
  late GameContent gameContent;
  String? selectedAnswer;
  String feedbackMessage = "";
  Color feedbackColor = Colors.transparent;
  AudioPlayer _audioPlayer = AudioPlayer();

  @override
  void initState() {
    super.initState();
    gameContent = GameContent.getGameContent(widget.gameId);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Game ${widget.gameId}",
          style: GoogleFonts.lexendDeca(),
        ),
        backgroundColor: Colors.green,
      ),
      body: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.start,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  SizedBox(height: 20),
                  Text(
                    "Game Sound and Picture",
                    style: GoogleFonts.lexendDeca(fontSize: 22, color: Colors.black),
                  ),
                  SizedBox(height: 20),
                  loadImage(gameContent.imagePath),
                  SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      playSound(gameContent.soundPath);
                    },
                    child: Icon(Icons.play_arrow),
                    style: ElevatedButton.styleFrom(
                      shape: CircleBorder(),
                      padding: EdgeInsets.all(16),
                      backgroundColor: Colors.blue,
                    ),
                  ),
                  SizedBox(height: 10),
                  Text(
                    feedbackMessage,
                    style: GoogleFonts.lexendDeca(
                      fontSize: 20,
                      color: feedbackColor,
                    ),
                  ),
                  SizedBox(height: 20),
                  // Constrain GridView's height to prevent layout issues
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0), // Add padding to prevent touching the edges
                    child: GridView.builder(
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 2, // 2 buttons per row
                        crossAxisSpacing: 12.0, // Spacing between columns
                        mainAxisSpacing: 12.0, // Spacing between rows
                        childAspectRatio: 2.5, // Narrower buttons
                      ),
                      itemCount: gameContent.answers.length,
                      physics: NeverScrollableScrollPhysics(), // Prevent scrolling inside GridView
                      shrinkWrap: true, // Ensure GridView takes only required height
                      itemBuilder: (context, index) {
                        return _buildAnswerButton(gameContent.answers[index]);
                      },
                    ),
                  ),


                ],
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton(
              onPressed: () {
                widget.onGameCompleted();
                Navigator.pop(context);
              },
              child: Text(
                "Next Level",
                style: GoogleFonts.lexendDeca(fontSize: 20, color: Colors.white),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: EdgeInsets.symmetric(horizontal: 110, vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(5),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget loadImage(String imagePath) {
    return Container(
      width: 120,
      height: 120,
      child: Image.asset(imagePath),
    );
  }

  Widget _buildAnswerButton(String answer) {
  Color buttonColor = Colors.blue[300]!; // Default button color
  if (selectedAnswer == answer) {
    buttonColor = (answer == gameContent.correctAnswer) ? Colors.green : Colors.red;
  }

  return SizedBox(
    width: 90,
    height: 50,
    child: ElevatedButton(
      onPressed: () => _checkAnswer(answer),
      style: ElevatedButton.styleFrom(
        backgroundColor: buttonColor,
        padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.star,
            color: Colors.white,
            size: 20,
          ),
          SizedBox(width: 4),
          Flexible(
            child: Text(
              answer,
              style: GoogleFonts.lexendDeca(fontSize: 20),
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    ),
  );
}



  void _checkAnswer(String answer) {
  setState(() {
    selectedAnswer = answer;
    if (answer == gameContent.correctAnswer) {
      feedbackMessage = "Correct!";
      feedbackColor = Colors.green;
    } else {
      feedbackMessage = "Try Again!";
      feedbackColor = Colors.red;
      // Reset after 2 seconds
      Future.delayed(Duration(seconds: 2), () {
        setState(() {
          feedbackMessage = ""; // Clear the feedback message
          feedbackColor = Colors.transparent; // Reset feedback color
          selectedAnswer = null; // Reset button state
        });
      });
    }
  });
}


  void playSound(String soundPath) async {
    await _audioPlayer.play(AssetSource(soundPath));
  }
}
